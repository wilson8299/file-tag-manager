# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
    tags:
    - '*'
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest 

    env:
      Tag_Vsersion: v1.0.0.0
      Solution_Name: FileTagManager.sln
      Wap_Project_Directory: FileTagManager.Package
      Wap_Project_Path: FileTagManager.WPF\FileTagManager.WPF.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 3.1.x

    - run: dotnet restore ${{ env.Wap_Project_Path }}

    - run: dotnet build ${{ env.Wap_Project_Path }} -c Release --no-restore

    - run: dotnet publish ${{ env.Wap_Project_Path }} -c Release --self-contained -r win-x64 -p:PublishSingleFile=true

    - name: make
      run: |
        mkdir FileTagManager\Data
        xcopy FileTagManager.WPF\bin\Release\netcoreapp3.1\win-x64\Data .\FileTagManager\Data
        xcopy FileTagManager.WPF\bin\Release\netcoreapp3.1\win-x64\publish\*.exe .\FileTagManager

    - name: Archive Release
      uses: thedoctor0/zip-release@main
      with:
        type: 'zip'
        filename: 'release.zip'
        path: '.\FileTagManager'

    - name: Upload Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: 'release.zip'
        tag: ${{ env.Tag_Vsersion }}
        token: ${{ secrets.GITHUB_TOKEN }}